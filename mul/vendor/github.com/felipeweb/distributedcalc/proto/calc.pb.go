// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/calc.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OpRequest struct {
	Left                 float64  `protobuf:"fixed64,1,opt,name=Left,json=left,proto3" json:"Left,omitempty"`
	Right                float64  `protobuf:"fixed64,2,opt,name=Right,json=right,proto3" json:"Right,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpRequest) Reset()         { *m = OpRequest{} }
func (m *OpRequest) String() string { return proto.CompactTextString(m) }
func (*OpRequest) ProtoMessage()    {}
func (*OpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_584ef17bc26b2c88, []int{0}
}

func (m *OpRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpRequest.Unmarshal(m, b)
}
func (m *OpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpRequest.Marshal(b, m, deterministic)
}
func (m *OpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpRequest.Merge(m, src)
}
func (m *OpRequest) XXX_Size() int {
	return xxx_messageInfo_OpRequest.Size(m)
}
func (m *OpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OpRequest proto.InternalMessageInfo

func (m *OpRequest) GetLeft() float64 {
	if m != nil {
		return m.Left
	}
	return 0
}

func (m *OpRequest) GetRight() float64 {
	if m != nil {
		return m.Right
	}
	return 0
}

type ResultResponse struct {
	Result               float64  `protobuf:"fixed64,1,opt,name=Result,json=result,proto3" json:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResultResponse) Reset()         { *m = ResultResponse{} }
func (m *ResultResponse) String() string { return proto.CompactTextString(m) }
func (*ResultResponse) ProtoMessage()    {}
func (*ResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_584ef17bc26b2c88, []int{1}
}

func (m *ResultResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultResponse.Unmarshal(m, b)
}
func (m *ResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultResponse.Marshal(b, m, deterministic)
}
func (m *ResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultResponse.Merge(m, src)
}
func (m *ResultResponse) XXX_Size() int {
	return xxx_messageInfo_ResultResponse.Size(m)
}
func (m *ResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResultResponse proto.InternalMessageInfo

func (m *ResultResponse) GetResult() float64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*OpRequest)(nil), "proto.OpRequest")
	proto.RegisterType((*ResultResponse)(nil), "proto.ResultResponse")
}

func init() { proto.RegisterFile("proto/calc.proto", fileDescriptor_584ef17bc26b2c88) }

var fileDescriptor_584ef17bc26b2c88 = []byte{
	// 179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0x4e, 0xcc, 0x49, 0xd6, 0x03, 0x33, 0x85, 0x58, 0xc1, 0x94, 0x92, 0x29, 0x17,
	0xa7, 0x7f, 0x41, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x90, 0x10, 0x17, 0x8b, 0x4f, 0x6a,
	0x5a, 0x89, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x63, 0x10, 0x4b, 0x4e, 0x6a, 0x5a, 0x89, 0x90, 0x08,
	0x17, 0x6b, 0x50, 0x66, 0x7a, 0x46, 0x89, 0x04, 0x13, 0x58, 0x90, 0xb5, 0x08, 0xc4, 0x51, 0xd2,
	0xe0, 0xe2, 0x0b, 0x4a, 0x2d, 0x2e, 0xcd, 0x29, 0x09, 0x4a, 0x2d, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e,
	0x15, 0x12, 0xe3, 0x62, 0x83, 0x88, 0x40, 0x75, 0xb3, 0x15, 0x81, 0x79, 0x46, 0xa6, 0x5c, 0xcc,
	0x8e, 0x29, 0x29, 0x42, 0x7a, 0x10, 0x4a, 0x00, 0x62, 0xbb, 0x1e, 0xdc, 0x4e, 0x29, 0x51, 0xa8,
	0x08, 0xaa, 0x71, 0x20, 0x6d, 0xc1, 0xa5, 0x49, 0x20, 0x6d, 0x20, 0x8a, 0x14, 0x6d, 0xbe, 0xa5,
	0x39, 0x20, 0x6d, 0x20, 0x8a, 0x14, 0x6d, 0x81, 0xa5, 0xf9, 0x20, 0x6d, 0x20, 0x8a, 0x58, 0x6d,
	0x49, 0x6c, 0x60, 0x51, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xba, 0x74, 0x3c, 0x58, 0x5e,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AddClient is the client API for Add service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AddClient interface {
	Add(ctx context.Context, in *OpRequest, opts ...grpc.CallOption) (*ResultResponse, error)
}

type addClient struct {
	cc *grpc.ClientConn
}

func NewAddClient(cc *grpc.ClientConn) AddClient {
	return &addClient{cc}
}

func (c *addClient) Add(ctx context.Context, in *OpRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/proto.Add/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddServer is the server API for Add service.
type AddServer interface {
	Add(context.Context, *OpRequest) (*ResultResponse, error)
}

// UnimplementedAddServer can be embedded to have forward compatible implementations.
type UnimplementedAddServer struct {
}

func (*UnimplementedAddServer) Add(ctx context.Context, req *OpRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}

func RegisterAddServer(s *grpc.Server, srv AddServer) {
	s.RegisterService(&_Add_serviceDesc, srv)
}

func _Add_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Add/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServer).Add(ctx, req.(*OpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Add_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Add",
	HandlerType: (*AddServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Add_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/calc.proto",
}

// SubClient is the client API for Sub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubClient interface {
	Sub(ctx context.Context, in *OpRequest, opts ...grpc.CallOption) (*ResultResponse, error)
}

type subClient struct {
	cc *grpc.ClientConn
}

func NewSubClient(cc *grpc.ClientConn) SubClient {
	return &subClient{cc}
}

func (c *subClient) Sub(ctx context.Context, in *OpRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/proto.Sub/Sub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubServer is the server API for Sub service.
type SubServer interface {
	Sub(context.Context, *OpRequest) (*ResultResponse, error)
}

// UnimplementedSubServer can be embedded to have forward compatible implementations.
type UnimplementedSubServer struct {
}

func (*UnimplementedSubServer) Sub(ctx context.Context, req *OpRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sub not implemented")
}

func RegisterSubServer(s *grpc.Server, srv SubServer) {
	s.RegisterService(&_Sub_serviceDesc, srv)
}

func _Sub_Sub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubServer).Sub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Sub/Sub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubServer).Sub(ctx, req.(*OpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Sub",
	HandlerType: (*SubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sub",
			Handler:    _Sub_Sub_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/calc.proto",
}

// MulClient is the client API for Mul service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MulClient interface {
	Mul(ctx context.Context, in *OpRequest, opts ...grpc.CallOption) (*ResultResponse, error)
}

type mulClient struct {
	cc *grpc.ClientConn
}

func NewMulClient(cc *grpc.ClientConn) MulClient {
	return &mulClient{cc}
}

func (c *mulClient) Mul(ctx context.Context, in *OpRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/proto.Mul/Mul", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MulServer is the server API for Mul service.
type MulServer interface {
	Mul(context.Context, *OpRequest) (*ResultResponse, error)
}

// UnimplementedMulServer can be embedded to have forward compatible implementations.
type UnimplementedMulServer struct {
}

func (*UnimplementedMulServer) Mul(ctx context.Context, req *OpRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mul not implemented")
}

func RegisterMulServer(s *grpc.Server, srv MulServer) {
	s.RegisterService(&_Mul_serviceDesc, srv)
}

func _Mul_Mul_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulServer).Mul(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mul/Mul",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulServer).Mul(ctx, req.(*OpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mul_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Mul",
	HandlerType: (*MulServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mul",
			Handler:    _Mul_Mul_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/calc.proto",
}

// QuoClient is the client API for Quo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QuoClient interface {
	Quo(ctx context.Context, in *OpRequest, opts ...grpc.CallOption) (*ResultResponse, error)
}

type quoClient struct {
	cc *grpc.ClientConn
}

func NewQuoClient(cc *grpc.ClientConn) QuoClient {
	return &quoClient{cc}
}

func (c *quoClient) Quo(ctx context.Context, in *OpRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/proto.Quo/Quo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuoServer is the server API for Quo service.
type QuoServer interface {
	Quo(context.Context, *OpRequest) (*ResultResponse, error)
}

// UnimplementedQuoServer can be embedded to have forward compatible implementations.
type UnimplementedQuoServer struct {
}

func (*UnimplementedQuoServer) Quo(ctx context.Context, req *OpRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Quo not implemented")
}

func RegisterQuoServer(s *grpc.Server, srv QuoServer) {
	s.RegisterService(&_Quo_serviceDesc, srv)
}

func _Quo_Quo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoServer).Quo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Quo/Quo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoServer).Quo(ctx, req.(*OpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Quo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Quo",
	HandlerType: (*QuoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Quo",
			Handler:    _Quo_Quo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/calc.proto",
}
